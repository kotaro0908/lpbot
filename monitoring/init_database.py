#!/usr/bin/env python3
"""
LP BOTÁõ£Ë¶ñ„Ç∑„Çπ„ÉÜ„É† - „Éá„Éº„Çø„Éô„Éº„ÇπÂàùÊúüÂåñ„Çπ„ÇØ„É™„Éó„Éà
SQLite„Éá„Éº„Çø„Éô„Éº„Çπ„ÅÆ‰ΩúÊàê„Å®„ÉÜ„Éº„Éñ„É´ÂÆöÁæ©
"""

import sqlite3
import os
from datetime import datetime
from pathlib import Path

# „Éá„Éº„Çø„Éô„Éº„Çπ„Éë„Çπ
DB_PATH = Path(__file__).parent / "lpbot.db"
SCHEMA_VERSION = "1.0.0"


class DatabaseInitializer:
    """„Éá„Éº„Çø„Éô„Éº„ÇπÂàùÊúüÂåñ„ÇØ„É©„Çπ"""

    def __init__(self, db_path=DB_PATH):
        self.db_path = db_path
        self.conn = None

    def connect(self):
        """„Éá„Éº„Çø„Éô„Éº„ÇπÊé•Á∂ö"""
        self.conn = sqlite3.connect(self.db_path)
        self.conn.row_factory = sqlite3.Row
        # Â§ñÈÉ®„Ç≠„ÉºÂà∂Á¥Ñ„ÇíÊúâÂäπÂåñ
        self.conn.execute("PRAGMA foreign_keys = ON")

    def close(self):
        """„Éá„Éº„Çø„Éô„Éº„ÇπÂàáÊñ≠"""
        if self.conn:
            self.conn.close()

    def create_tables(self):
        """ÂÖ®„ÉÜ„Éº„Éñ„É´„ÅÆ‰ΩúÊàê"""
        print("üìä „Éá„Éº„Çø„Éô„Éº„Çπ„ÉÜ„Éº„Éñ„É´„Çí‰ΩúÊàê‰∏≠...")

        # „É™„Éê„É©„É≥„ÇπÂ±•Ê≠¥„ÉÜ„Éº„Éñ„É´
        self.conn.execute("""
                          CREATE TABLE IF NOT EXISTS rebalance_history
                          (
                              id
                              INTEGER
                              PRIMARY
                              KEY
                              AUTOINCREMENT,
                              timestamp
                              DATETIME
                              NOT
                              NULL,
                              reason
                              TEXT
                              NOT
                              NULL,
                              old_nft_id
                              INTEGER,
                              new_nft_id
                              INTEGER,
                              old_tick_lower
                              INTEGER,
                              old_tick_upper
                              INTEGER,
                              new_tick_lower
                              INTEGER,
                              new_tick_upper
                              INTEGER,
                              price_at_rebalance
                              REAL,
                              estimated_amount
                              REAL,
                              actual_amount
                              REAL,
                              swap_executed
                              BOOLEAN
                              DEFAULT
                              0,
                              tx_hash
                              TEXT,
                              gas_used
                              INTEGER,
                              gas_price
                              REAL,
                              success
                              BOOLEAN
                              DEFAULT
                              1,
                              error_message
                              TEXT,
                              duration_seconds
                              INTEGER,
                              created_at
                              DATETIME
                              DEFAULT
                              CURRENT_TIMESTAMP
                          )
                          """)

        # Ë≥áÈáëÂ§âÂãïÂ±•Ê≠¥„ÉÜ„Éº„Éñ„É´
        self.conn.execute("""
                          CREATE TABLE IF NOT EXISTS fund_changes
                          (
                              id
                              INTEGER
                              PRIMARY
                              KEY
                              AUTOINCREMENT,
                              timestamp
                              DATETIME
                              NOT
                              NULL,
                              change_type
                              TEXT
                              NOT
                              NULL,
                              amount_usd
                              REAL
                              NOT
                              NULL,
                              eth_balance
                              REAL,
                              weth_balance
                              REAL,
                              usdc_balance
                              REAL,
                              total_value_usd
                              REAL,
                              trigger_action
                              TEXT,
                              created_at
                              DATETIME
                              DEFAULT
                              CURRENT_TIMESTAMP
                          )
                          """)

        # SWAPÂ±•Ê≠¥„ÉÜ„Éº„Éñ„É´
        self.conn.execute("""
                          CREATE TABLE IF NOT EXISTS swap_history
                          (
                              id
                              INTEGER
                              PRIMARY
                              KEY
                              AUTOINCREMENT,
                              timestamp
                              DATETIME
                              NOT
                              NULL,
                              from_token
                              TEXT
                              NOT
                              NULL,
                              to_token
                              TEXT
                              NOT
                              NULL,
                              amount
                              REAL
                              NOT
                              NULL,
                              swap_direction
                              TEXT
                              NOT
                              NULL,
                              tx_hash
                              TEXT,
                              success
                              BOOLEAN
                              DEFAULT
                              1,
                              error_message
                              TEXT,
                              created_at
                              DATETIME
                              DEFAULT
                              CURRENT_TIMESTAMP
                          )
                          """)

        # „Ç¨„Çπ„É™„Éà„É©„Ç§Â±•Ê≠¥„ÉÜ„Éº„Éñ„É´
        self.conn.execute("""
                          CREATE TABLE IF NOT EXISTS gas_retry_history
                          (
                              id
                              INTEGER
                              PRIMARY
                              KEY
                              AUTOINCREMENT,
                              timestamp
                              DATETIME
                              NOT
                              NULL,
                              function_name
                              TEXT
                              NOT
                              NULL,
                              attempt
                              INTEGER
                              NOT
                              NULL,
                              gas_limit
                              INTEGER
                              NOT
                              NULL,
                              gas_multiplier
                              REAL
                              NOT
                              NULL,
                              success
                              BOOLEAN
                              DEFAULT
                              0,
                              created_at
                              DATETIME
                              DEFAULT
                              CURRENT_TIMESTAMP
                          )
                          """)

        # LP‰ΩúÊàêÂ±•Ê≠¥„ÉÜ„Éº„Éñ„É´
        self.conn.execute("""
                          CREATE TABLE IF NOT EXISTS lp_creation_history
                          (
                              id
                              INTEGER
                              PRIMARY
                              KEY
                              AUTOINCREMENT,
                              timestamp
                              DATETIME
                              NOT
                              NULL,
                              tx_hash
                              TEXT,
                              gas_used
                              INTEGER,
                              events
                              INTEGER,
                              tick_lower
                              INTEGER,
                              tick_upper
                              INTEGER,
                              amount_weth
                              REAL,
                              amount_usdc
                              REAL,
                              success
                              BOOLEAN
                              DEFAULT
                              1,
                              error_message
                              TEXT,
                              created_at
                              DATETIME
                              DEFAULT
                              CURRENT_TIMESTAMP
                          )
                          """)

        # „Ç∑„Çπ„ÉÜ„É†„É≠„Ç∞„ÉÜ„Éº„Éñ„É´
        self.conn.execute("""
                          CREATE TABLE IF NOT EXISTS system_logs
                          (
                              id
                              INTEGER
                              PRIMARY
                              KEY
                              AUTOINCREMENT,
                              timestamp
                              DATETIME
                              NOT
                              NULL,
                              log_level
                              TEXT
                              NOT
                              NULL,
                              function_name
                              TEXT,
                              message
                              TEXT
                              NOT
                              NULL,
                              execution_time_ms
                              INTEGER,
                              error_details
                              TEXT,
                              created_at
                              DATETIME
                              DEFAULT
                              CURRENT_TIMESTAMP
                          )
                          """)

        # Áõ£Ë¶ñ„Çµ„Ç§„ÇØ„É´„ÉÜ„Éº„Éñ„É´
        self.conn.execute("""
                          CREATE TABLE IF NOT EXISTS monitoring_cycles
                          (
                              id
                              INTEGER
                              PRIMARY
                              KEY
                              AUTOINCREMENT,
                              timestamp
                              DATETIME
                              NOT
                              NULL,
                              cycle
                              INTEGER
                              NOT
                              NULL,
                              tracked_nfts
                              TEXT,
                              status
                              TEXT
                              NOT
                              NULL,
                              created_at
                              DATETIME
                              DEFAULT
                              CURRENT_TIMESTAMP
                          )
                          """)

        # „Éë„Éï„Ç©„Éº„Éû„É≥„ÇπÊåáÊ®ôÔºàÊó•Ê¨°ÈõÜË®àÔºâ„ÉÜ„Éº„Éñ„É´
        self.conn.execute("""
                          CREATE TABLE IF NOT EXISTS daily_performance
                          (
                              date
                              DATE
                              PRIMARY
                              KEY,
                              total_value_usd
                              REAL,
                              fee_earned_usd
                              REAL,
                              impermanent_loss_usd
                              REAL,
                              gas_spent_usd
                              REAL,
                              net_profit_usd
                              REAL,
                              apr_percent
                              REAL,
                              rebalance_count
                              INTEGER
                              DEFAULT
                              0,
                              swap_count
                              INTEGER
                              DEFAULT
                              0,
                              error_count
                              INTEGER
                              DEFAULT
                              0,
                              success_rate
                              REAL,
                              in_range_percent
                              REAL,
                              created_at
                              DATETIME
                              DEFAULT
                              CURRENT_TIMESTAMP,
                              updated_at
                              DATETIME
                              DEFAULT
                              CURRENT_TIMESTAMP
                          )
                          """)

        # „É°„Çø„Éá„Éº„Çø„ÉÜ„Éº„Éñ„É´Ôºà„Çπ„Ç≠„Éº„Éû„Éê„Éº„Ç∏„Éß„É≥ÁÆ°ÁêÜÔºâ
        self.conn.execute("""
                          CREATE TABLE IF NOT EXISTS metadata
                          (
                              key
                              TEXT
                              PRIMARY
                              KEY,
                              value
                              TEXT
                              NOT
                              NULL,
                              updated_at
                              DATETIME
                              DEFAULT
                              CURRENT_TIMESTAMP
                          )
                          """)

        self.conn.commit()
        print("‚úÖ „ÉÜ„Éº„Éñ„É´‰ΩúÊàêÂÆå‰∫Ü")

    def create_indexes(self):
        """„Ç§„É≥„Éá„ÉÉ„ÇØ„Çπ„ÅÆ‰ΩúÊàê"""
        print("üîç „Ç§„É≥„Éá„ÉÉ„ÇØ„Çπ„Çí‰ΩúÊàê‰∏≠...")

        # „É™„Éê„É©„É≥„ÇπÂ±•Ê≠¥„ÅÆ„Ç§„É≥„Éá„ÉÉ„ÇØ„Çπ
        self.conn.execute("""
                          CREATE INDEX IF NOT EXISTS idx_rebalance_timestamp
                              ON rebalance_history(timestamp DESC)
                          """)

        self.conn.execute("""
                          CREATE INDEX IF NOT EXISTS idx_rebalance_nft
                              ON rebalance_history(old_nft_id, new_nft_id)
                          """)

        # Ë≥áÈáëÂ§âÂãï„ÅÆ„Ç§„É≥„Éá„ÉÉ„ÇØ„Çπ
        self.conn.execute("""
                          CREATE INDEX IF NOT EXISTS idx_fund_changes_timestamp
                              ON fund_changes(timestamp DESC)
                          """)

        # SWAPÂ±•Ê≠¥„ÅÆ„Ç§„É≥„Éá„ÉÉ„ÇØ„Çπ
        self.conn.execute("""
                          CREATE INDEX IF NOT EXISTS idx_swap_timestamp
                              ON swap_history(timestamp DESC)
                          """)

        # „Ç∑„Çπ„ÉÜ„É†„É≠„Ç∞„ÅÆ„Ç§„É≥„Éá„ÉÉ„ÇØ„Çπ
        self.conn.execute("""
                          CREATE INDEX IF NOT EXISTS idx_system_logs_timestamp
                              ON system_logs(timestamp DESC)
                          """)

        self.conn.execute("""
                          CREATE INDEX IF NOT EXISTS idx_system_logs_level
                              ON system_logs(log_level)
                          """)

        # Áõ£Ë¶ñ„Çµ„Ç§„ÇØ„É´„ÅÆ„Ç§„É≥„Éá„ÉÉ„ÇØ„Çπ
        self.conn.execute("""
                          CREATE INDEX IF NOT EXISTS idx_monitoring_cycles_timestamp
                              ON monitoring_cycles(timestamp DESC)
                          """)

        self.conn.commit()
        print("‚úÖ „Ç§„É≥„Éá„ÉÉ„ÇØ„Çπ‰ΩúÊàêÂÆå‰∫Ü")

    def insert_metadata(self):
        """„É°„Çø„Éá„Éº„Çø„ÅÆÊåøÂÖ•"""
        print("üìã „É°„Çø„Éá„Éº„Çø„ÇíË®≠ÂÆö‰∏≠...")

        # „Çπ„Ç≠„Éº„Éû„Éê„Éº„Ç∏„Éß„É≥
        self.conn.execute("""
        INSERT OR REPLACE INTO metadata (key, value) 
        VALUES ('schema_version', ?)
        """, (SCHEMA_VERSION,))

        # ÂàùÊúüÂåñÊó•ÊôÇ
        self.conn.execute("""
        INSERT OR REPLACE INTO metadata (key, value) 
        VALUES ('initialized_at', ?)
        """, (datetime.now().isoformat(),))

        # ÊúÄÁµÇÊõ¥Êñ∞Êó•ÊôÇ
        self.conn.execute("""
        INSERT OR REPLACE INTO metadata (key, value) 
        VALUES ('last_import_at', ?)
        """, ('NULL',))

        self.conn.commit()
        print("‚úÖ „É°„Çø„Éá„Éº„ÇøË®≠ÂÆöÂÆå‰∫Ü")

    def create_views(self):
        """‰æøÂà©„Å™„Éì„É•„Éº„ÅÆ‰ΩúÊàê"""
        print("üëÅÔ∏è „Éì„É•„Éº„Çí‰ΩúÊàê‰∏≠...")

        # ÊúÄÊñ∞„ÅÆ„É™„Éê„É©„É≥„ÇπÁä∂Ê≥Å„Éì„É•„Éº
        self.conn.execute("""
                          CREATE VIEW IF NOT EXISTS v_latest_rebalance AS
                          SELECT r.*,
                                 CASE
                                     WHEN r.success = 1 THEN 'SUCCESS'
                                     ELSE 'FAILED'
                                     END                                as status_text,
                                 (r.actual_amount - r.estimated_amount) as amount_diff
                          FROM rebalance_history r
                          ORDER BY r.timestamp DESC LIMIT 10
                          """)

        # Êó•Ê¨°„Çµ„Éû„É™„Éº„Éì„É•„Éº
        self.conn.execute("""
                          CREATE VIEW IF NOT EXISTS v_daily_summary AS
                          SELECT
                              DATE (timestamp) as date, COUNT (*) as rebalance_count, SUM (CASE WHEN success = 1 THEN 1 ELSE 0 END) as success_count, AVG (CASE WHEN success = 1 THEN 1.0 ELSE 0.0 END) * 100 as success_rate, COUNT (DISTINCT old_nft_id || '-' || new_nft_id) as unique_transitions
                          FROM rebalance_history
                          GROUP BY DATE (timestamp)
                          ORDER BY date DESC
                          """)

        # „Ç¢„ÇØ„ÉÜ„Ç£„ÉñNFT„Éì„É•„Éº
        self.conn.execute("""
                          CREATE VIEW IF NOT EXISTS v_active_nfts AS
                          SELECT new_nft_id     as nft_id,
                                 MAX(timestamp) as last_seen,
                                 new_tick_lower as tick_lower,
                                 new_tick_upper as tick_upper
                          FROM rebalance_history
                          WHERE success = 1
                            AND new_nft_id IS NOT NULL
                          GROUP BY new_nft_id
                          ORDER BY MAX(timestamp) DESC
                          """)

        self.conn.commit()
        print("‚úÖ „Éì„É•„Éº‰ΩúÊàêÂÆå‰∫Ü")

    def initialize(self):
        """„Éá„Éº„Çø„Éô„Éº„Çπ„ÅÆÂÆåÂÖ®ÂàùÊúüÂåñ"""
        print(f"\nüöÄ LP BOTÁõ£Ë¶ñ„Éá„Éº„Çø„Éô„Éº„ÇπÂàùÊúüÂåñÈñãÂßã")
        print(f"üìç „Éá„Éº„Çø„Éô„Éº„Çπ„Éë„Çπ: {self.db_path}")

        try:
            # „Éá„Éº„Çø„Éô„Éº„ÇπÊé•Á∂ö
            self.connect()

            # ÂêÑÁ®Æ‰ΩúÊàêÂá¶ÁêÜ
            self.create_tables()
            self.create_indexes()
            self.create_views()
            self.insert_metadata()

            # Áµ±Ë®àÊÉÖÂ†±Ë°®Á§∫
            self.show_statistics()

            print("\n‚úÖ „Éá„Éº„Çø„Éô„Éº„ÇπÂàùÊúüÂåñÂÆå‰∫Ü!")

        except Exception as e:
            print(f"\n‚ùå „Ç®„É©„ÉºÁô∫Áîü: {e}")
            raise
        finally:
            self.close()

    def show_statistics(self):
        """„Éá„Éº„Çø„Éô„Éº„ÇπÁµ±Ë®àÊÉÖÂ†±„ÅÆË°®Á§∫"""
        print("\nüìä „Éá„Éº„Çø„Éô„Éº„ÇπÁµ±Ë®à:")

        # „ÉÜ„Éº„Éñ„É´‰∏ÄË¶ß
        cursor = self.conn.execute("""
                                   SELECT name
                                   FROM sqlite_master
                                   WHERE type = 'table'
                                     AND name NOT LIKE 'sqlite_%'
                                   ORDER BY name
                                   """)

        tables = cursor.fetchall()
        print(f"   „ÉÜ„Éº„Éñ„É´Êï∞: {len(tables)}")

        for table in tables:
            count = self.conn.execute(f"SELECT COUNT(*) FROM {table['name']}").fetchone()[0]
            print(f"   - {table['name']}: {count} ‰ª∂")

        # „Ç§„É≥„Éá„ÉÉ„ÇØ„ÇπÊï∞
        cursor = self.conn.execute("""
                                   SELECT COUNT(*)
                                   FROM sqlite_master
                                   WHERE type = 'index'
                                     AND name NOT LIKE 'sqlite_%'
                                   """)
        index_count = cursor.fetchone()[0]
        print(f"   „Ç§„É≥„Éá„ÉÉ„ÇØ„ÇπÊï∞: {index_count}")

        # „Éì„É•„ÉºÊï∞
        cursor = self.conn.execute("""
                                   SELECT COUNT(*)
                                   FROM sqlite_master
                                   WHERE type = 'view'
                                   """)
        view_count = cursor.fetchone()[0]
        print(f"   „Éì„É•„ÉºÊï∞: {view_count}")

        # „Éá„Éº„Çø„Éô„Éº„Çπ„Çµ„Ç§„Ç∫
        db_size = os.path.getsize(self.db_path) / 1024  # KB
        print(f"   „Éá„Éº„Çø„Éô„Éº„Çπ„Çµ„Ç§„Ç∫: {db_size:.2f} KB")


def main():
    """„É°„Ç§„É≥ÂÆüË°åÈñ¢Êï∞"""
    # Êó¢Â≠ò„ÅÆ„Éá„Éº„Çø„Éô„Éº„Çπ„Åå„ÅÇ„ÇãÂ†¥Âêà„ÅÆÁ¢∫Ë™ç
    if DB_PATH.exists():
        response = input(f"\n‚ö†Ô∏è  Êó¢Â≠ò„ÅÆ„Éá„Éº„Çø„Éô„Éº„Çπ„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åó„Åü„ÄÇ\n‰∏äÊõ∏„Åç„Åó„Åæ„Åô„ÅãÔºü (y/N): ")
        if response.lower() != 'y':
            print("‚ùå ÂàùÊúüÂåñ„Çí„Ç≠„É£„É≥„Çª„É´„Åó„Åæ„Åó„Åü")
            return
        else:
            # „Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„Éó‰ΩúÊàê
            backup_path = DB_PATH.with_suffix(f'.backup_{datetime.now().strftime("%Y%m%d_%H%M%S")}.db')
            os.rename(DB_PATH, backup_path)
            print(f"üì¶ „Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„Éó‰ΩúÊàê: {backup_path}")

    # „Éá„Éº„Çø„Éô„Éº„ÇπÂàùÊúüÂåñ
    initializer = DatabaseInitializer()
    initializer.initialize()


if __name__ == "__main__":
    main()